
bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000391  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000101  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000298  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000008c  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  8a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
#include <util/delay.h>

//I AM NOT ABLE TO TRANSMIT A STRING...
void init(void)
{
	UBRRL=0X33;
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<RXEN)|(1<<TXEN);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
} 
  9e:	08 95       	ret

000000a0 <tx>:
void tx(unsigned char a)
{
	UDR=a;
  a0:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<TXC))==0);
  a2:	5e 9b       	sbis	0x0b, 6	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <tx+0x2>
}
  a6:	08 95       	ret

000000a8 <rx>:
unsigned char rx()
{int i=0;
	unsigned char *b;
	*b=UDR;
  a8:	8c b1       	in	r24, 0x0c	; 12
  aa:	80 93 00 00 	sts	0x0000, r24
	while(!(UCSRA&(1<<RXC)));
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <rx+0x6>
	{b=UDR;
		while(!(UCSRA&(1<<RXC)));
		b++;
	} ;*/
	return(*b);
}
  b2:	08 95       	ret

000000b4 <main>:

int main(void)
{  unsigned char *p;
	DDRD=0X02;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	81 bb       	out	0x11, r24	; 17
	DDRA=0XFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	init();
  bc:	0e 94 49 00 	call	0x92	; 0x92 <init>
	while(1)
    {
       *p=rx();
	   if(*p=='n')
	   PORTA=0X0f;
  c0:	cf e0       	ldi	r28, 0x0F	; 15
	DDRD=0X02;
	DDRA=0XFF;
	init();
	while(1)
    {
       *p=rx();
  c2:	0e 94 54 00 	call	0xa8	; 0xa8 <rx>
  c6:	80 93 00 00 	sts	0x0000, r24
	   if(*p=='n')
  ca:	8e 36       	cpi	r24, 0x6E	; 110
  cc:	11 f4       	brne	.+4      	; 0xd2 <main+0x1e>
	   PORTA=0X0f;
  ce:	cb bb       	out	0x1b, r28	; 27
  d0:	f8 cf       	rjmp	.-16     	; 0xc2 <main+0xe>
	   {
		   PORTA=0X08;
	   }*/
	   
	   else
	   PORTA=0X00;
  d2:	1b ba       	out	0x1b, r1	; 27
  d4:	f6 cf       	rjmp	.-20     	; 0xc2 <main+0xe>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
